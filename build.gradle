plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'UMC'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
    querydsl.extendsFrom compileClasspath
}

repositories {
    mavenCentral()
}

dependencies {
    // JPA & DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.data:spring-data-jpa:3.1.0'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Lombok
    compileOnly("org.projectlombok:lombok")
    testImplementation ('org.projectlombok:lombok')
    testCompileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // Amazon S3 (NCP Object Storage)
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.232'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring Rest Docs (With MockMvc)
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.findify:s3mock_2.13:0.2.6'

    // Redis
    implementation 'it.ozimov:embedded-redis:0.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Firebase
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    // Batch, Scheduler
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.awaitility:awaitility:4.2.0'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

bootJar {
    dependsOn asciidoctor

    copy {
        from "${asciidoctor.outputDir}"
        into file("src/main/resources/static/docs")
    }

    copy {
        from file("src/main/resources/static")
        into file("build/resources/main/static")
    }

    archivesBaseName = 'StockOneQ'
    archiveFileName = 'StockOneQ.jar'
    archiveVersion = "0.0.1"
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// QueryDsl QClass Generated Position
def qTypeGeneratedPosition = "src/main/generated"

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(qTypeGeneratedPosition))
}

// add QueryDsl QClass to Java Source Set
sourceSets {
    main.java.srcDirs += [qTypeGeneratedPosition]
}

// delete QueryDsl QClass
clean {
    delete file(qTypeGeneratedPosition)
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}
